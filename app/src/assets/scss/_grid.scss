@import 'breakpoints';

/* 
  nom du breakpoint  
  breakpoint
  taille de la grille maximum
  nombre de colonne de la grille
  marges : bord du conteneur de la grille 
  gutters : bords des colonnes
*/

$grid: (
  (
    xs,
    map-get($breakpoints, xs),
    100%,
    4,
    6px,
    12px
  ), 
  (
    sm,
    map-get($breakpoints, sm),
    100%,
    12,
    6px,
    12px
  ),
  (
    md,
    map-get($breakpoints, md),
    960px,
    12,
    20px,
    16px
  ),
  (
    lg,
    map-get($breakpoints, lg),
    1152px,
    24,
    20px,
    16px
  ),
  (
    xl,
    map-get($breakpoints, xl),
    1392px,
    24,
    20px,
    16px
  )
) !default;

.grid-container {
  display: flex;
  height: 100vh;
  justify-content: center;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  width: 100%;
  
  &.active { opacity: 1; }
  &.hidden { opacity: 0; }

  .grid-size-name {
    background: rgba(0, 0, 0, 0.5);
    height: 30px;
    text-align: center;
    width: 100%;
    z-index: 1;
    
    // affichage de la grille pour aider au d√©veloppement
    @each $bp-name, $breakpoint in $grid {
      @media (min-width: #{$breakpoint}) {
        &:before {
          color: white;
          content: "#{$bp-name}";
          font-weight: bold;
          text-transform: uppercase;
        }
      }
    }
  }

  .grid-display {
    align-content: start;
    counter-reset: grid;
    display: -ms-grid;
    display: grid;
    -ms-grid-rows: 1;
    grid-template-rows: 1;
    height: 100vh;
    justify-content: center;
    pointer-events: none;
    position: fixed;

    .grid-column {
      display: none;
      background-color: rgba(170, 24, 255, 0.2);
      height: 100vh;
      position: relative;
      &:before {
        color: white;
        counter-increment: grid;
        content: counters(grid,"");
        font-weight: bold;
        padding-top: 30px;
        text-align: center;
      }
    }
    
    @each $bp-name, $breakpoint, $grid-width, $grid-columns, $grid-margins, $grid-gutters in $grid {
      @media (min-width: #{$breakpoint}) {
        -ms-grid-columns: repeat(#{$grid-columns}, 1fr);
        grid-template-columns: repeat(#{$grid-columns}, 1fr);
        padding: 0 #{$grid-margins};
        width: #{$grid-width};

        .grid-column {
          padding: 0 calc(#{$grid-gutters}/2);
        
          /* &:nth-child(-n + #{$grid-columns}) {
            display: -ms-grid;
            display: grid;
          }*/
        }
      }
    }

    @media (min-width: map-get($breakpoints, xs)) {
      .grid-column:nth-child(-n+5) {
        display: -ms-grid;
        display: grid;
      }
    }
    @media (min-width: map-get($breakpoints, sm)) {
      .grid-column:nth-child(-n+13) {
        display: -ms-grid;
        display: grid;
      }
    }
    @media (min-width: map-get($breakpoints, lg)) {
      .grid-column:nth-child(-n+25) {
        display: -ms-grid;
        display: grid;
      }
    }
  }
}
