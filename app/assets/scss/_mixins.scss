@import '../../../node_modules/six-design-tokens/build/scss/token-variables';

$color-combinations: (
    "blue": (
        "light": $color-blue-light,
        "medium": $color-blue-medium,
        "dark": $color-blue-dark,
    ),
    "red": (
        "light": $color-red-light,
        "medium": $color-red-medium,
        "dark": $color-red-dark,
    ),
    "orange": (
        "light": $color-orange-light,
        "medium": $color-orange-medium,
        "dark": $color-orange-dark
    )
) !default;


@each $color-key, $color-variants in $color-combinations {
$base-color-value: map-get($color-variants, 'light');

&.#{$color-key} {
    background-color: $base-color-value;
    
    &:before { content: "#{$color-key}"; }
    &:after { content: "#{$base-color-value}"; }
    
    $variant-gradient: (unquote("to bottom"),);
    
    $index: 0;
    @each $variant-name, $variant-value in $color-variants {
    $variant-gradient: append($variant-gradient, $variant-value $index * $variant-height);
    $index: $index + 1;
    $variant-gradient: append($variant-gradient, $variant-value $index * $variant-height);
    }

    .variants {
    border-left: 2px solid black;
    border-bottom: 2px solid black;
    position: absolute;
    height: $variant-height * length($color-variants);
    width: $variant-height;
    right: 0;
    top: 0;
    background: white;
    }
  }
}

@function basecolor($key: 'blue') {
    @return map-get($color-combinations, $key);
}
.test {
    $button-color: basecolor('blue');
}

@mixin dark-combination($color) {

}

@function to-list($value) {
    @return if(type-of($value) != list, ($value,), $value);
}


@mixin border-bg($color, $bg) {
    @each $theme, $variables in $themes {
        .theme-#{$theme} & {
            #{$property}: map-get($variables, $key);
        }
    }
}